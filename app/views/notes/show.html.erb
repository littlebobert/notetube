<div class="container2">
  <div id="column1">
    <div id="player"></div>

    <div class="mt-2"><h4><%= @note.title %></h4></div>

    <div class="text-muted"><%= number_with_delimiter(@note.view_count)%> views | <%= @note.published_at.strftime("%b %d, %Y") %> <br> <i class="fa-solid fa-user"></i> <%= @note.channel_name %>
    </div>

    <div class="bookmark-button">
      <%= render 'bookmark_button', note: @note %>
    </div>
    <div class="mt-3" data-controller="read-more" data-read-more-more-text-value="Read more" data-read-more-less-text-value="Read less" data-spy="scroll" data-target="desc" id="desc-scroll">
      <p class="my-content" data-read-more-target="content" id="desc">
        <%= @note.video_description %>
      </p>

      <button data-action="read-more#toggle" class="btn btn-light">Read more</button>
    </div>
  </div>

  <!-- app/views/notes/show.html.erb -->
  <div id="column2" data-controller="tabs">
    <ul class="list-inline tabs-underlined mt-3" id="notes">
      <li>
        <%= link_to "Notes", note_path(@note, :show => "notes"), class: "tab-underlined #{params[:show] == "notes" || params[:show].nil? ? "active" : ""}", data: { action: "tabs#switchTab", tabs_target: "tab" } %>
      </li>
      <li>
        <%= link_to "Transcript", note_path(@note, :show => "transcript"), class: "tab-underlined #{params[:show] == "transcript" ? "active" : ""}", data: { action: "tabs#switchTab", tabs_target: "tab" } %>
      </li>
    </ul>
      <div>
        <% if params[:show] == "notes" || params[:show].nil? %>
        <strong class="h3" data-controller="tooltip" data-bs-toggle="tooltip" data-bs-position="bottom" title="Generate PDF"><i onclick="printElement(document.getElementById('notes-or-transcript'));" class="fa-solid fa-file-pdf"></i></strong>
        <% end %>
        <strong class="h3" data-controller="tooltip" data-bs-toggle="tooltip" data-bs-position="bottom" title="Copy"><i class="fa-solid fa-copy" onclick="copyElement(document.getElementById('notes-or-transcript'))"></i></strong>
        <div id="notes-or-transcript">
          <% if params[:show] == "notes" || params[:show].nil? %>
            <%= raw(@memo) %>
          <% else %>
            <% @timestamped_transcript.each do |timestamped| %><span class="caption" onclick="jumpTo(<%= timestamped[:start_time] %>)" data-start-time="<%= timestamped[:start_time] %>" data-duration="<%= timestamped[:duration] %>"><%= Rails::Html::FullSanitizer.new.sanitize(timestamped[:caption]) %></span> <% end %>
          <% end %>
        </div>
      </div>
    </div>
  </div>

</div>

<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player('player', {
    height: '390',
    width: '640',
    videoId: '<%= @video_id %>',
    playerVars: {
      'playsinline': 1
    },
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

// 4. The API will call this function when the video player is ready.
function onPlayerReady(event) {
  event.target.playVideo();
}

// 5. The API calls this function when the player's state changes.
var stopped = true;
function onPlayerStateChange(event) {
  stopped = event.data != 1;
  setInterval(() => {
    if (stopped) {
      return;
    }
    captions = document.getElementsByClassName("caption");
    Array.from(captions).forEach(function(caption) {
      if (player.getCurrentTime() > Number(caption.dataset.startTime) && player.getCurrentTime() < Number(caption.dataset.startTime) + Number(caption.dataset.duration)) {
        caption.classList.add("current-caption");
      } else {
        caption.classList.remove("current-caption");
      }
    })
  }, 1000)
}

function jumpTo(startTime) {
  player.seekTo(startTime, true);
}
function copyElement(element) {
  var selection = window.getSelection();
  var range = document.createRange();
  range.setStartBefore(element);
  range.setEndAfter(element);
  selection.removeAllRanges();
  selection.addRange(range);

  document.execCommand('copy');

  selection.removeAllRanges();
}

function printElement(element) {
    var mywindow = window.open('', 'PRINT', 'height=400,width=600');

    mywindow.document.write('<html><head><title>' + document.title  + '</title>');
    mywindow.document.write('</head><body >');
    mywindow.document.write('<h1>' + document.title  + '</h1>');
    mywindow.document.write(element.innerHTML);
    mywindow.document.write('</body></html>');

    mywindow.document.close(); // necessary for IE >= 10
    mywindow.focus(); // necessary for IE >= 10*/

    mywindow.print();
    mywindow.close();
}
</script>
